# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "main", "workflow-testing" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    # vvv Taken from https://github.com/saxbophone/CPP20-Cross-Platform-Template (Public Domain)

    - name: Cache CMake dependency source code
      uses: actions/cache@v2
      env:
        cache-name: cache-cmake-dependency-sources
      with:
        # CMake cache is at ${{github.workspace}}/build/_deps but we only will cache folders ending in '-src' to cache source code
        path: ${{github.workspace}}/build/_deps/*-src
        # Cache hash is dependent on CMakeLists files anywhere as these can change what's in the cache, as well as cmake modules files
        key: ${{ env.cache-name }}-${{ hashFiles('**/CMakeLists.txt', 'cmake/**') }}
        # it's acceptable to reuse caches for different CMakeLists content if exact match is not available and unlike build caches, we
        # don't need to restrict these by OS or compiler as it's only source code that's being cached
        restore-keys: |
          ${{ env.cache-name }}-

    - name: Cache CMake dependency build objects
      uses: actions/cache@v2
      env:
        cache-name: cache-cmake-dependency-builds
      with:
        # CMake cache is at ${{github.workspace}}/build/_deps but we only care about the folders ending in -build or -subbuild
        path: |
          ${{github.workspace}}/build/_deps/*-build
          ${{github.workspace}}/build/_deps/*-subbuild
        # Cache hash is dependent on CMakeLists files anywhere as these can change what's in the cache, as well as cmake modules files
        key: ${{ env.cache-name }}-${{ matrix.os }}-${{ matrix.cxx }}-${{ hashFiles('**/CMakeLists.txt', 'cmake/**') }}
        # it's acceptable to reuse caches for different CMakeLists content if exact match is not available
        # as long as the OS and Compiler match exactly
        restore-keys: |
          ${{ env.cache-name }}-${{ matrix.os }}-${{ matrix.cxx }}-

    # ^^^ Taken from https://github.com/saxbophone/CPP20-Cross-Platform-Template (Public Domain)

    - run: sudo apt update
    - uses: hendrikmuhs/ccache-action@v1.2

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -D CMAKE_CXX_COMPILER_LAUNCHER=ccache

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

